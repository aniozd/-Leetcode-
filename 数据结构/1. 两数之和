难度：简单


题目：

给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。

你可以按任意顺序返回答案。

 

示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

示例 2：

输入：nums = [3,2,4], target = 6
输出：[1,2]

示例 3：

输入：nums = [3,3], target = 6
输出：[0,1]

 

提示：

    2 <= nums.length <= 103
    -109 <= nums[i] <= 109
    -109 <= target <= 109
    只会存在一个有效答案


我的代码：

class Solution {
  
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
       vector<int> b ;
        for(int i = 0;i<nums.size()-1;i++){
             
             if(target<nums[i])
             for(int j  = i+1;j<nums.size();j++){
                     if(nums[i]+nums[j] == target){
                          b[0] = i;
                          b[1] = j;
                          return b;
                     } 

             }


        }
        
         return b;
    }
};



思路：直接暴力，遍历数组，找到两数之和为target，并返回，这里做了一个小小的剪枝，在第一层循环时，如果nums[i]已经
大于target，就不需要进行下一层的循环
时间复杂度：O(n2)  空间复杂度：O(1)只用到了b[0],b[1]两个内存

其实这道题，用哈希表更好，每遍历nums[i],就查询哈希表里面有没有target-nums[i]的值
这样时间复杂度为O(n),空间复杂度：O(n)以空间换时间

不过当初第一次来leetcode,什么都不知道，连用暴力都在想这样能不能过犹豫了好久跑去评论区看到有一句
简单题不用搞什么花样直接暴力，我立刻就跑回去暴力了哈哈


哈希代码：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hashtable;
        for (int i = 0; i < nums.size(); ++i) {
            auto it = hashtable.find(target - nums[i]);
            if (it != hashtable.end()) {
                return {it->second, i};
            }
            hashtable[nums[i]] = i;
        }
        return {};
    }
};


知识点：

数组遍历，哈希查询

